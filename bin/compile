#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

BIN_DIR=$(cd $(dirname $0); pwd)
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

mkdir -p $BUILD_DIR/apigee_edge_micro
mkdir -p $BUILD_DIR/.profile.d
cp $ROOT_DIR/lib/micro_config.py $BUILD_DIR/apigee_edge_micro
cp $ROOT_DIR/lib/zz_micro_config.sh $BUILD_DIR/.profile.d
cp $ROOT_DIR/lib/nodejs.sh $BUILD_DIR/.profile.d
unzip $ROOT_DIR/lib/apigee-edge-micro.zip -d $BUILD_DIR/apigee_edge_micro > /dev/null

## TODO: Be smart about whether we need to add node, becaues the node buildpack
##        may have already done that for us. If that's the case we don't need to
##        install node.
## TODO: Also todo ... test this with a non-node.js cf app.
## TODO: OR create own directory to install this node into .. might be needed
## TEST more.

tar xzf $ROOT_DIR/lib/node.tar.gz -C /tmp
rm -rf $BUILD_DIR/.heroku/node/*
mv /tmp/node-v4.2.2-linux-x64/* $BUILD_DIR/.heroku/node
chmod +x $BUILD_DIR/.heroku/node/bin/*
export PATH="$BUILD_DIR/.heroku/node/bin":$PATH

#install_npm "$npm_engine" "$BUILD_DIR/.heroku/node"

# echo "which node: `which node`"

# configure edge microgateway
## these are fake/temporary values
export PYTHONPATH="${PYTHONPATH}:$ROOT_DIR/lib"
MICROCONFIG="$(python -c 'from micro_config import compile; compile()')"
ORGENV="$(python -c 'from micro_config import getOrgEnv; getOrgEnv()')"

cd $BUILD_DIR/apigee_edge_micro/apigee-edge-micro-2.0.4/cli/

CONFIG_OUT="$(./edgemicro configure $MICROCONFIG)"

MG_KEY=$(sed -n 's/key: \(.*\)/\1 /p' <<< "$CONFIG_OUT")
MG_SECRET=$(sed -n 's/secret: \(.*\)/\1 /p' <<< "$CONFIG_OUT")

LOCAL_APP="nf-pcfdev-local-io"
LOCAL_PATH="/"
LOCAL_TARGET="http://localhost:8999"

mkdir -p $BUILD_DIR/.edgemicro
cp ~/.edgemicro/* $BUILD_DIR/.edgemicro

echo "DEBUG=* apigee_edge_micro/apigee-edge-micro-2.0.4/cli/edgemicro start $ORGENV -k $MG_KEY -s $MG_SECRET -a $LOCAL_APP -b $LOCAL_PATH -t $LOCAL_TARGET &" >> $BUILD_DIR/.profile.d/zz_micro_config.sh
echo "export PORT=8999" >> $BUILD_DIR/.profile.d/zz_micro_config.sh

## we could automate Edge tasks here...

## require binding to existing service broker ... --- service could communicate to Edge
## different plan...

## look for vcap services .. use service broker to config Edge-side requirements
